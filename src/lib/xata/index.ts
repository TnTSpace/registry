// Generated by Xata Codegen 0.30.1. Please do not edit.
import { buildClient } from "@xata.io/client";
import type {
  BaseClientOptions,
  SchemaInference,
  XataRecord,
} from "@xata.io/client";
import { defaultOptions } from "./config";

const tables = [
  {
    name: "document",
    checkConstraints: {
      document_xata_id_length_xata_id: {
        name: "document_xata_id_length_xata_id",
        columns: ["xata_id"],
        definition: "CHECK ((length(xata_id) < 256))",
      },
    },
    foreignKeys: {
      category_link: {
        name: "category_link",
        columns: ["category"],
        referencedTable: "documentcategory",
        referencedColumns: ["xata_id"],
        onDelete: "SET NULL",
      },
      file_link: {
        name: "file_link",
        columns: ["file"],
        referencedTable: "file",
        referencedColumns: ["xata_id"],
        onDelete: "SET NULL",
      },
    },
    primaryKey: [],
    uniqueConstraints: {
      _pgroll_new_document_xata_id_key: {
        name: "_pgroll_new_document_xata_id_key",
        columns: ["xata_id"],
      },
    },
    columns: [
      {
        name: "category",
        type: "link",
        link: { table: "documentcategory" },
        notNull: false,
        unique: false,
        defaultValue: null,
        comment: '{"xata.link":"documentcategory"}',
      },
      {
        name: "content",
        type: "text",
        notNull: false,
        unique: false,
        defaultValue: null,
        comment: "",
      },
      {
        name: "file",
        type: "link",
        link: { table: "file" },
        notNull: false,
        unique: false,
        defaultValue: null,
        comment: '{"xata.link":"file"}',
      },
      {
        name: "title",
        type: "text",
        notNull: false,
        unique: false,
        defaultValue: null,
        comment: "",
      },
      {
        name: "xata_createdat",
        type: "datetime",
        notNull: true,
        unique: false,
        defaultValue: "now()",
        comment: "",
      },
      {
        name: "xata_id",
        type: "text",
        notNull: true,
        unique: true,
        defaultValue: "('rec_'::text || (xata_private.xid())::text)",
        comment: "",
      },
      {
        name: "xata_updatedat",
        type: "datetime",
        notNull: true,
        unique: false,
        defaultValue: "now()",
        comment: "",
      },
      {
        name: "xata_version",
        type: "int",
        notNull: true,
        unique: false,
        defaultValue: "0",
        comment: "",
      },
    ],
  },
  {
    name: "documentcategory",
    checkConstraints: {
      documentcategory_xata_id_length_xata_id: {
        name: "documentcategory_xata_id_length_xata_id",
        columns: ["xata_id"],
        definition: "CHECK ((length(xata_id) < 256))",
      },
    },
    foreignKeys: {},
    primaryKey: [],
    uniqueConstraints: {
      _pgroll_new_documentcategory_xata_id_key: {
        name: "_pgroll_new_documentcategory_xata_id_key",
        columns: ["xata_id"],
      },
    },
    columns: [
      {
        name: "category",
        type: "text",
        notNull: false,
        unique: false,
        defaultValue: null,
        comment: "",
      },
      {
        name: "xata_createdat",
        type: "datetime",
        notNull: true,
        unique: false,
        defaultValue: "now()",
        comment: "",
      },
      {
        name: "xata_id",
        type: "text",
        notNull: true,
        unique: true,
        defaultValue: "('rec_'::text || (xata_private.xid())::text)",
        comment: "",
      },
      {
        name: "xata_updatedat",
        type: "datetime",
        notNull: true,
        unique: false,
        defaultValue: "now()",
        comment: "",
      },
      {
        name: "xata_version",
        type: "int",
        notNull: true,
        unique: false,
        defaultValue: "0",
        comment: "",
      },
    ],
  },
  {
    name: "file",
    checkConstraints: {
      file_xata_id_length_xata_id: {
        name: "file_xata_id_length_xata_id",
        columns: ["xata_id"],
        definition: "CHECK ((length(xata_id) < 256))",
      },
    },
    foreignKeys: {},
    primaryKey: [],
    uniqueConstraints: {
      _pgroll_new_file_xata_id_key: {
        name: "_pgroll_new_file_xata_id_key",
        columns: ["xata_id"],
      },
    },
    columns: [
      {
        name: "fileId",
        type: "text",
        notNull: false,
        unique: false,
        defaultValue: null,
        comment: "{}",
      },
      {
        name: "size",
        type: "text",
        notNull: false,
        unique: false,
        defaultValue: null,
        comment: "{}",
      },
      {
        name: "url",
        type: "text",
        notNull: false,
        unique: false,
        defaultValue: null,
        comment: "{}",
      },
      {
        name: "xata_createdat",
        type: "datetime",
        notNull: true,
        unique: false,
        defaultValue: "now()",
        comment: "",
      },
      {
        name: "xata_id",
        type: "text",
        notNull: true,
        unique: true,
        defaultValue: "('rec_'::text || (xata_private.xid())::text)",
        comment: "",
      },
      {
        name: "xata_updatedat",
        type: "datetime",
        notNull: true,
        unique: false,
        defaultValue: "now()",
        comment: "",
      },
      {
        name: "xata_version",
        type: "int",
        notNull: true,
        unique: false,
        defaultValue: "0",
        comment: "",
      },
    ],
  },
  {
    name: "image",
    checkConstraints: {
      image_xata_id_length_xata_id: {
        name: "image_xata_id_length_xata_id",
        columns: ["xata_id"],
        definition: "CHECK ((length(xata_id) < 256))",
      },
    },
    foreignKeys: {},
    primaryKey: [],
    uniqueConstraints: {
      _pgroll_new_image_xata_id_key: {
        name: "_pgroll_new_image_xata_id_key",
        columns: ["xata_id"],
      },
    },
    columns: [
      {
        name: "fileId",
        type: "text",
        notNull: false,
        unique: false,
        defaultValue: null,
        comment: "",
      },
      {
        name: "size",
        type: "text",
        notNull: false,
        unique: false,
        defaultValue: null,
        comment: "",
      },
      {
        name: "url",
        type: "text",
        notNull: false,
        unique: false,
        defaultValue: null,
        comment: "",
      },
      {
        name: "xata_createdat",
        type: "datetime",
        notNull: true,
        unique: false,
        defaultValue: "now()",
        comment: "",
      },
      {
        name: "xata_id",
        type: "text",
        notNull: true,
        unique: true,
        defaultValue: "('rec_'::text || (xata_private.xid())::text)",
        comment: "",
      },
      {
        name: "xata_updatedat",
        type: "datetime",
        notNull: true,
        unique: false,
        defaultValue: "now()",
        comment: "",
      },
      {
        name: "xata_version",
        type: "int",
        notNull: true,
        unique: false,
        defaultValue: "0",
        comment: "",
      },
    ],
  },
] as const;

export type SchemaTables = typeof tables;
export type InferredTypes = SchemaInference<SchemaTables>;

export type Document = InferredTypes["document"];
export type DocumentRecord = Document & XataRecord;

export type Documentcategory = InferredTypes["documentcategory"];
export type DocumentcategoryRecord = Documentcategory & XataRecord;

export type File = InferredTypes["file"];
export type FileRecord = File & XataRecord;

export type Image = InferredTypes["image"];
export type ImageRecord = Image & XataRecord;

export type DatabaseSchema = {
  document: DocumentRecord;
  documentcategory: DocumentcategoryRecord;
  file: FileRecord;
  image: ImageRecord;
};

const DatabaseClient = buildClient();


export class XataClient extends DatabaseClient<DatabaseSchema> {
  constructor(options?: BaseClientOptions) {
    super({ ...defaultOptions, ...options }, tables);
  }
}

let instance: XataClient | undefined = undefined;

export const getXataClient = () => {
  if (instance) return instance;

  instance = new XataClient();
  return instance;
};
